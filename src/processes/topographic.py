import contextlib
import os
import sys

import numpy as np
import richdem as rd


def slope(dem: np.ndarray, units: str = "degrees", no_data: int = -9999) -> np.ndarray:
    """Calculate the slope of a terrain based on a Digital Elevation Model (DEM).

    Args:
      dem:
        Digital elevation model data representing the terrain.
      units:
        Units for computing the slope.
      no_data:
        No-data value in the DEM data.

    Returns:
      Slope raster map in the desired unit.
    """
    with __silence_stderr():
        dem = rd.rdarray(dem, no_data=no_data)
        result = rd.TerrainAttribute(dem, attrib="slope_{0}".format(units))
    result = np.clip(result, 0, result.max())

    return result


def aspect(dem: np.ndarray, no_data: int = -9999) -> np.ndarray:
    """Calculate the aspect of a terrain slope based on a Digital Elevation Model (DEM).

    Args:
      dem:
        Digital elevation model data representing the terrain.
      no_data:
        No-data value in the DEM data.

    Returns:
      Aspect raster map.
    """
    with __silence_stderr():
        dem = rd.rdarray(dem, no_data=no_data)
        result = rd.TerrainAttribute(dem, attrib="aspect")
    result = np.clip(result, 0, result.max())

    return result


@contextlib.contextmanager
def __silence_stderr():
    """Suppresses the default console outputs generated by the RichDem package.

    """
    stderr_fd = sys.stderr.fileno()
    orig_fd = os.dup(stderr_fd)
    null_fd = os.open(os.devnull, os.O_WRONLY)
    os.dup2(null_fd, stderr_fd)
    try:
        yield
    finally:
        os.dup2(orig_fd, stderr_fd)
        os.close(orig_fd)
        os.close(null_fd)
